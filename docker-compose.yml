version: "3.9"

x-airflow-common: &airflow-common
  image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.10.1}
  env_file:
    - .env
  build:
    context: .
    dockerfile: ./docker-images/apache-airflow/Dockerfile
  platform: linux/amd64
  environment: &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: LzEUTqZ5_LMCCKbB5v6FKqZSZ5hbN3hhK3ziCDKVFho=
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: "true"
    AIRFLOW__CORE__LOAD_EXAMPLES: "false"
    AIRFLOW__API__AUTH_BACKENDS: "airflow.api.auth.backend.session"
    PYTHONPATH: /opt/airflow:/opt/airflow/jobs:/opt/airflow/helper:/opt/airflow/common
    JAVA_HOME: /usr/lib/jvm/java-17-openjdk-amd64
    AIRFLOW__WEBSERVER__SECRET_KEY: rMf3WuBsYmj3jAdBsDOcdqD2fx7DOaUPVA2opVPSBws
  volumes:
    - ./dags:/opt/airflow/dags
    - ./logs:/opt/airflow/logs
    - ./plugins:/opt/airflow/plugins
    - ./jobs:/opt/airflow/jobs
    - ./common:/opt/airflow/common
    - ./helper:/opt/airflow/helper
  user: "${AIRFLOW_UID:-50000}:${AIRFLOW_GID:-50000}"
  depends_on:
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy
    minio:
      condition: service_healthy
    broker:
      condition: service_healthy
    zookeeper:
      condition: service_healthy

services:
  minio:
    hostname: yt-minio
    container_name: yt-minio
    image: minio/minio:latest
    platform: linux/amd64
    ports:
      - "9001:9001"
      - "9000:9000"
    deploy:
      resources:
        limits:
          cpus: "0.3"
          memory: "750M"
        reservations:
          cpus: "0.1"
          memory: "250M"
    command: ["server", "/data", "--console-address", ":9001"]
    volumes:
      - miniodata:/data
    env_file:
      - .env
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: always
    networks:
      - yt-project

  mc:
    image: minio/mc
    container_name: yt-mc
    hostname: yt-mc
    env_file:
      - .env
    entrypoint: >
      /bin/sh -c " until (/usr/bin/mc config host add minio http://minio:9000/ minio minio123) do echo , "ruok", ""'...waiting...' && sleep 10; done; /usr/bin/mc mb minio/mlflow; tail -f /dev/null;"
    depends_on:
      - minio
    networks:
      - yt-project

  mariadb:
    image: mariadb:10.5.16
    container_name: yt_mariadb
    volumes:
      - mariadb:/var/lib/mysql
    ports:
      - "3309:3306"
    env_file:
      - .env
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 30s
      timeout: 10s
      retries: 50
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: "0.7"
          memory: "1.5G"
        reservations:
          cpus: "0.3"
          memory: "750M"
    restart: always
    networks:
      - yt-project

  hive-metastore:
    container_name: yt-hive-metastore
    hostname: yt-hive-metastore
    image: "bde2020/hive-metastore-postgresql:latest"
    platform: linux/amd64
    ports:
      - "9083:9083"
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: "2G"
        reservations:
          cpus: "0.5"
          memory: "1G"
    volumes:
      - ./docker-images/hive-metastore/metastore-site.xml:/opt/apache-hive-metastore-3.0.0-bin/conf/metastore-site.xml:ro
    environment:
      HIVE_METASTORE_DB_TYPE: mariadb
    depends_on:
      - mariadb
    restart: always
    networks:
      - yt-project

  spark-master:
    build:
      context: ./docker-images/spark
      dockerfile: ./Dockerfile
    container_name: "yt_spark_master"
    hostname: "spark-master"
    command:
      ["/opt/spark/bin/spark-class", "org.apache.spark.deploy.master.Master"]
    ports:
      - "7077:7077"
      - "8080:8080"
    expose:
      - "7077"
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - SPARK_USER=spark
    volumes:
      - ./docker-images/spark/conf/spark-defaults.conf:/opt/spark/conf/spark-defaults.conf
      - ./docker-images/spark/conf/log4j.properties:/opt/spark/conf/log4j.properties
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    restart: always
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: "2G"
        reservations:
          cpus: "0.5"
          memory: "1G"
    networks:
      - yt-project

  spark-worker-1:
    build:
      context: ./docker-images/spark
      dockerfile: ./Dockerfile
    container_name: "yt-spark-worker-1"
    command:
      [
        "/opt/spark/bin/spark-class",
        "org.apache.spark.deploy.worker.Worker",
        "spark://spark-master:7077",
      ]
    volumes:
      - ./docker-images/spark/conf/spark-defaults.conf:/opt/spark/conf/spark-defaults.conf
      - ./docker-images/spark/conf/log4j.properties:/opt/spark/conf/log4j.properties
    env_file:
      - .env
    depends_on:
      - spark-master
    deploy:
      resources:
        limits:
          cpus: "2.0"
          memory: "4G"
        reservations:
          cpus: "1.0"
          memory: "2G"
    restart: always
    networks:
      - yt-project

  zookeeper:
    image: confluentinc/cp-zookeeper:7.2.1
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    deploy:
      resources:
        limits:
          cpus: "0.3"
          memory: "750M"
        reservations:
          cpus: "0.1"
          memory: "250M"
    healthcheck:
      test:
        [
          "CMD",
          "echo",
          "ruok",
          "|",
          "nc",
          "localhost",
          "2181",
          "|",
          "grep",
          "imok",
        ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always

  broker:
    image: confluentinc/cp-kafka:7.2.1
    container_name: yt-kafka
    ports:
      - "9092:9092"
      - "29092:29092"
    deploy:
      resources:
        limits:
          cpus: "0.7"
          memory: "1.5G"
        reservations:
          cpus: "0.3"
          memory: "750M"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    healthcheck:
      test:
        [
          "CMD",
          "kafka-broker-api-versions",
          "--bootstrap-server",
          "localhost:29092",
        ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always

  akhq:
    image: tchiotludo/akhq:latest
    container_name: akhq
    ports:
      - "9090:8080"
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: "1G"
        reservations:
          cpus: "0.2"
          memory: "512M"
    environment:
      AKHQ_CONFIGURATION: |
        akhq:
          connections:
            kafka-cluster:
              properties:
                bootstrap.servers: "broker:9092"
    depends_on:
      - broker
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always

  postgres:
    image: postgres:latest
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: "0.7"
          memory: "1.5G"
        reservations:
          cpus: "0.3"
          memory: "750M"
    networks:
      - yt-project
    restart: always

  redis:
    image: redis:7.2-bookworm
    ports:
      - 6379:6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 30s
      retries: 50
    deploy:
      resources:
        limits:
          cpus: "0.3"
          memory: "750M"
        reservations:
          cpus: "0.1"
          memory: "250M"
    restart: always
    networks:
      - yt-project

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - 8081:8080
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: "2G"
        reservations:
          cpus: "0.5"
          memory: "1G"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    networks:
      - yt-project
    restart: always

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: "1G"
        reservations:
          cpus: "0.2"
          memory: "500M"
    networks:
      - yt-project
    restart: always

  airflow-worker:
    <<: *airflow-common
    command: celery worker
    networks:
      - yt-project
    deploy:
      resources:
        limits:
          cpus: "2.0"
          memory: "4G"
        reservations:
          cpus: "1.0"
          memory: "2G"
    restart: always

  airflow-init:
    <<: *airflow-common
    command: version
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: "true"
      _AIRFLOW_WWW_USER_CREATE: "true"
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
    networks:
      - yt-project

  flower:
    <<: *airflow-common
    command: celery flower
    ports:
      - 5555:5555
    deploy:
      resources:
        limits:
          cpus: "0.2"
          memory: "512M"
        reservations:
          cpus: "0.1"
          memory: "256M"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always

  trino:
    image: trinodb/trino:latest
    container_name: yt-trino
    ports:
      - "8082:8080"
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: "2G"
        reservations:
          cpus: "0.5"
          memory: "1G"
    environment:
      - JAVA_OPTIONS=-Xmx4G
    depends_on:
      - hive-metastore
    networks:
      - yt-project

networks:
  yt-project:
    driver: bridge
    name: yt-project

volumes:
  miniodata: {}
  mariadb: {}
  postgres-db-volume: {}
