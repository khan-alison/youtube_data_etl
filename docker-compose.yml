version: "3.9"

x-airflow-common: &airflow-common
  image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.10.2-python3.12}
  env_file:
    - .env
  build:
    context: .
    dockerfile: ./docker-images/apache-airflow/Dockerfile
  platform: linux/amd64
  environment: &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW__CORE__FERNET_KEY}
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: "true"
    AIRFLOW__CORE__LOAD_EXAMPLES: "false"
    AIRFLOW__CORE__HOSTNAME_CALLABLE: "socket.getfqdn"
    AIRFLOW__API__AUTH_BACKENDS: "airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session"
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: "true"
    AIRFLOW__WEBSERVER__SECRET_KEY: ${AIRFLOW_SECRET_KEY:-rMf3WuBsYmj3jAdBsDOcdqD2fx7DOaUPVA2opVPSBws}
    PYTHONPATH: /opt/airflow:/opt/airflow/jobs:/opt/airflow/helper:/opt/airflow/common
    JAVA_HOME: /usr/lib/jvm/java-17-openjdk-amd64
  volumes:
    - ./dags:/opt/airflow/dags
    - ./plugins:/opt/airflow/plugins
    - ./logs:/opt/airflow/logs
    - ./jobs:/opt/airflow/jobs
    - ./job_entries:/opt/airflow/job_entries
    - ./common:/opt/airflow/common
    - ./helper:/opt/airflow/helper
    - ./config:/opt/airflow/config
  user: "${AIRFLOW_UID:-50000}:${AIRFLOW_GID:-50000}"
  depends_on:
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy
    minio:
      condition: service_healthy
    kafka:
      condition: service_healthy
    zookeeper:
      condition: service_healthy

services:
  minio:
    hostname: yt-minio
    container_name: yt-minio
    image: minio/minio:latest
    platform: linux/amd64
    ports:
      - "9001:9001"
      - "9000:9000"
    command: ["server", "/data", "--console-address", ":9001"]
    volumes:
      - miniodata:/data
    env_file:
      - .env
    environment:
      - MINIO_NOTIFY_KAFKA_ENABLE_1=on
      - MINIO_NOTIFY_KAFKA_BROKERS_1=kafka:9092
      - MINIO_NOTIFY_KAFKA_TOPIC_1=minio-events
      - MINIO_NOTIFY_KAFKA_QUEUE_DIR_1=/tmp/kafka
      - MINIO_NOTIFY_KAFKA_QUEUE_LIMIT_1=1000
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: always
    networks:
      - yt-project

  mc:
    image: minio/mc
    container_name: yt-mc
    hostname: yt-mc
    env_file:
      - .env
    volumes:
      - ./scripts:/scripts
    tty: true
    stdin_open: true
    entrypoint: ["/bin/sh", "/scripts/enable_bucket_notification.sh"]
    depends_on:
      - minio
      - kafka
    networks:
      - yt-project

  mariadb:
    image: mariadb:10.5.16
    container_name: yt-mariadb
    volumes:
      - mariadb:/var/lib/mysql
      - ./docker-images/mariadb/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "3309:3306"
    env_file:
      - .env
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: metastore_db
      MYSQL_USER: admin
      MYSQL_PASSWORD: admin
    healthcheck:
      test:
        [
          "CMD",
          "mysqladmin",
          "ping",
          "-h",
          "localhost",
          "-u",
          "root",
          "-p${MYSQL_ROOT_PASSWORD}",
        ]
      interval: 30s
      timeout: 10s
      retries: 50
      start_period: 30s
    restart: always
    networks:
      - yt-project

  hive-metastore:
    hostname: yt-hive-metastore
    container_name: yt-hive-metastore
    # image: "bitsondatadev/hive-metastore:latest"
    build:
      context: .
      dockerfile: ./docker-images/hive-metastore/Dockerfile
    ports:
      - "9083:9083" # Metastore Thrift
    volumes:
      # - ./docker-images/hive-metastore/conf/metastore-site.xml:/opt/apache-hive-metastore-3.0.0-bin/conf/metastore-site.xml:ro
      - ./docker-images/hive-metastore/conf/metastore-site.xml:/opt/hive/conf/metastore-site.xml:ro
      - ./docker-images/hive-metastore/conf/core-site.xml:/opt/hive/conf/core-site.xml:ro
    environment:
      METASTORE_DB_HOSTNAME: mariadb
      AWS_ACCESS_KEY_ID: minio
      AWS_SECRET_ACCESS_KEY: minio123
      AWS_REGION: us-east-1
    depends_on:
      mariadb:
        condition: service_healthy
    networks:
      - yt-project

  spark-master:
    build:
      context: .
      dockerfile: ./docker-images/spark/Dockerfile
    env_file:
      - .env
    container_name: "yt_spark_master"
    hostname: "spark-master"
    ports:
      - "7077:7077"
      - "8080:8080"
    expose:
      - "7077"
    environment:
      - SPARK_MODE=master
      - SPARK_MASTER_HOST=spark-master
      - SPARK_LOCAL_IP=spark-master
      - SPARK_MASTER_PORT=7077
      - SPARK_MASTER_WEBUI_PORT=8080
      - SPARK_WORKER_CORES=4
      - SPARK_WORKER_MEMORY=4g
      - SPARK_MASTER_URL="spark://spark-master:7077"
      - SPARK_NO_DAEMONIZE=true
    volumes:
      - ./docker-images/spark/conf/spark-defaults.conf:/opt/spark/conf/spark-defaults.conf:ro
      - ./docker-images/spark/conf/log4j.properties:/opt/spark/conf/log4j.properties
      - ./docker-images/spark/conf/hive-site.xml:/opt/spark/conf/hive-site.xml:ro
      - ./jobs:/opt/spark/jobs
      - ./job_entries:/opt/spark/job_entries
      - ./logs:/opt/spark/logs
      - ./common:/opt/spark/common
      - ./helper:/opt/spark/helper
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    restart: always
    networks:
      - yt-project
    command:
      ["/opt/spark/bin/spark-class", "org.apache.spark.deploy.master.Master"]

  spark-worker-1:
    build:
      context: .
      dockerfile: ./docker-images/spark/Dockerfile
    container_name: "yt-spark-worker-1"
    env_file:
      - .env
    depends_on:
      - spark-master
    restart: always
    networks:
      - yt-project
    command:
      [
        "/opt/spark/bin/spark-class",
        "org.apache.spark.deploy.worker.Worker",
        "spark://spark-master:7077",
      ]

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    healthcheck:
      test:
        [
          "CMD",
          "echo",
          "ruok",
          "|",
          "nc",
          "localhost",
          "2181",
          "|",
          "grep",
          "imok",
        ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    networks:
      - yt-project

  # Kafka Broker
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    healthcheck:
      test:
        [
          "CMD",
          "kafka-broker-api-versions",
          "--bootstrap-server",
          "localhost:29092",
        ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    networks:
      - yt-project

  akhq:
    image: tchiotludo/akhq:latest
    container_name: akhq
    ports:
      - "9090:8080"
    environment:
      AKHQ_CONFIGURATION: |
        akhq:
          connections:
            kafka-cluster:
              properties:
                bootstrap.servers: "kafka:9092"
    depends_on:
      - kafka
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - yt-project
    restart: always

  postgres:
    image: postgres:latest
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: "0.7"
          memory: "1.5G"
        reservations:
          cpus: "0.3"
          memory: "750M"
    networks:
      - yt-project
    restart: always

  redis:
    image: redis:7.2-bookworm
    ports:
      - 6379:6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 30s
      retries: 50
    restart: always
    networks:
      - yt-project

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    hostname: youtube-airflow-webserver
    ports:
      - 8081:8080
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: "2G"
        reservations:
          cpus: "0.5"
          memory: "1G"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    networks:
      - yt-project
    restart: always

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    hostname: yt-airflow-scheduler
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: "1G"
        reservations:
          cpus: "0.2"
          memory: "500M"
    networks:
      - yt-project
    restart: always

  airflow-worker:
    <<: *airflow-common
    command: celery worker
    hostname: yt-airflow-worker
    networks:
      - yt-project
    deploy:
      resources:
        limits:
          cpus: "2.0"
          memory: "4G"
        reservations:
          cpus: "1.0"
          memory: "2G"
    restart: always

  airflow-triggerer:
    <<: *airflow-common
    command: triggerer
    hostname: yt-airflow-triggerer
    healthcheck:
      test:
        [
          "CMD-SHELL",
          'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"',
        ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    networks:
      - yt-project
    restart: always

  airflow-init:
    <<: *airflow-common
    command: version
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: "true"
      _AIRFLOW_WWW_USER_CREATE: "true"
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
    networks:
      - yt-project

  flower:
    <<: *airflow-common
    command: celery flower
    ports:
      - 5555:5555
    deploy:
      resources:
        limits:
          cpus: "0.2"
          memory: "512M"
        reservations:
          cpus: "0.1"
          memory: "256M"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always

  trino:
    image: trinodb/trino:461
    container_name: yt-trino
    ports:
      - "8082:8080"
    volumes:
      - ./docker-images/trino/etc:/etc/trino
      - ./jars/aws-java-sdk-bundle-1.12.316.jar:/usr/lib/trino/plugin/hive/aws-java-sdk-bundle-1.12.316.jar
      - ./jars/hadoop-aws-3.3.4.jar:/usr/lib/trino/plugin/hive/hadoop-aws-3.3.4.jar
      - ./jars/hadoop-common-3.3.4.jar:/usr/lib/trino/plugin/hive/hadoop-common-3.3.4.jar
    networks:
      - yt-project
    environment:
      - AWS_ACCESS_KEY_ID=minio
      - AWS_SECRET_ACCESS_KEY=minio123
    depends_on:
      - hive-metastore
      - minio

networks:
  yt-project:
    driver: bridge
    name: yt-project

volumes:
  miniodata: {}
  mariadb: {}
  postgres-db-volume: {}
